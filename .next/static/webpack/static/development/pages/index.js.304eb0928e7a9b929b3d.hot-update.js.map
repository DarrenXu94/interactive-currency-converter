{"version":3,"file":"static/webpack/static/development/pages/index.js.304eb0928e7a9b929b3d.hot-update.js","sources":["webpack:///./components/ConverterForm.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Currency from '../api/Currency'\n\nimport AutocompleteWrapper from './AutoCompleteWrapper'\nimport StepConvertor from './StepConvertor'\n\nclass ConverterForm extends Component {\n\n    state = {\n        convertFrom: '',\n        convertTo: '',\n        apiResponse: ''\n    }\n\n    requestConversion = () => {\n        let { convertFrom, convertTo } = this.state;\n        if (convertFrom !== '' && convertTo !== '') {\n            let res = Currency(convertFrom, convertTo)\n            this.setState({ apiResponse: res })\n        }\n    }\n\n    onChange = (value, type) => {\n        switch(type){\n            case 'from':\n                this.setState({ convertFrom: value })\n                break;\n            case 'to':\n                this.setState({ convertTo: value })\n                break;\n            default:\n                break;    \n    \n        }\n    }\n\n    onSelect = (value, type) => {\n        this.onChange(value,type);\n    }\n\n\n    onSwapClick = () => {\n        let {convertFrom, convertTo} = this.state;\n        this.setState({convertFrom: convertTo, convertTo: convertFrom})\n\n    }\n\n    render() {\n        let { convertFrom, convertTo, apiResponse } = this.state;\n        let {onChange} = this\n        return (\n            <div>\n                <h1>\n                    Convert currencies live!\n                </h1>\n                <label>Choose a currency to convert from</label>\n                <br />\n                <AutocompleteWrapper onSelectParent={this.onSelect} value={convertFrom} onChange={onChange} type={'from'}/>\n                <br />\n\n                <br />\n\n                <label>Choose a currency to convert to</label>\n                <br />\n                <AutocompleteWrapper onSelectParent={this.onSelect} value={convertTo} onChange={onChange} type={'to'}/>\n                <br />\n                <br />\n\n                <button onClick={this.requestConversion}>Convert</button>\n\n                <button onClick={this.onSwapClick}>Swap</button>\n\n                <h2>Converting {convertFrom} to {convertTo}</h2>\n                {apiResponse !== '' &&\n                    <StepConvertor convertFrom={convertFrom} convertTo={convertTo} apiResponse={apiResponse} />\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default ConverterForm;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAzEA;AACA;AA2EA;;;;A","sourceRoot":""}