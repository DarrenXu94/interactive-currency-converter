{"version":3,"file":"static/webpack/static/development/pages/index.js.b4cdf2c9e17310e57bb1.hot-update.js","sources":["webpack:///./components/ConverterForm.js"],"sourcesContent":["import React, { Component } from 'react';\n// import Currency from '../api/Currency'\n\nimport CountryCodes from '../configs/CountryCodes'\nimport CurrencySelector from '../configs/CurrencySelector'\n\nimport Autocomplete from 'react-autocomplete'\n\nfunction matchCurrencyToTerm(currency, value) {\n    return (\n        currency.CurrencyCode.toLowerCase().indexOf(value.toLowerCase()) !== -1 ||\n        currency.CurrencyName.toLowerCase().indexOf(value.toLowerCase()) !== -1\n    )\n}\n\nclass ConverterForm extends Component {\n    componentDidMount() {\n        // Currency()\n        // console.log(CountryCodes)\n        console.log(CurrencySelector.currency_list)\n    }\n    state = { value: 'AUD' }\n\n    render() {\n        let { value } = this.state\n        return (\n            <div>\n                <h1>\n                    Convert currencies live!\n                </h1>\n                <label>Choose a currency to convert from</label>\n                <br />\n                <Autocomplete\n                    getItemValue={(item) => item.CurrencyCode}\n                    items={CurrencySelector.currency_list}\n                    renderItem={(item, isHighlighted) =>\n                        <div key={item.CurrencyCode} style={{ background: isHighlighted ? 'lightgray' : 'black', cursor: 'pointer' }}>\n                            {item.CurrencyCode} - {item.CurrencyName}\n                        </div>\n                    }\n                    shouldItemRender={matchCurrencyToTerm}\n                    value={value}\n                    onChange={(event, value) => this.setState({ value })}\n                    onSelect={value => this.setState({ value })}\n                />\n\n                 <label>Choose a currency to convert to</label>\n                <br />\n                <Autocomplete\n                    getItemValue={(item) => item.CurrencyCode}\n                    items={CurrencySelector.currency_list}\n                    renderItem={(item, isHighlighted) =>\n                        <div key={item.CurrencyCode} style={{ background: isHighlighted ? 'lightgray' : 'black', cursor: 'pointer' }}>\n                            {item.CurrencyCode} - {item.CurrencyName}\n                        </div>\n                    }\n                    shouldItemRender={matchCurrencyToTerm}\n                    value={value}\n                    onChange={(event, value) => this.setState({ value })}\n                    onSelect={value => this.setState({ value })}\n                />\n                \n            </div>\n        );\n    }\n}\n\nexport default ConverterForm;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;AAMA;AAAA;AAAA;AACA;;;;;;AANA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;;;;AAjDA;AACA;AAmDA;;;;A","sourceRoot":""}